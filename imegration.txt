У меня Next.js проект (App Router, TypeScript) с Tailwind и Framer Motion. Папка public/media содержит hero.mp4, bg-cyberpunk.png, logo.png, а также используются изображения камней по путям /media/rock1.png и /media/rock2.png (проверьте их наличие). Хочу продолжить разработку крипто‑кибер лендинга.

Проверь, пожалуйста:

*версии Node/npm и чистую установку зависимостей:
 *используем npm; ставь через npm ci
*корректность сборки и запуска:
 *npm run build; затем npm run start
*отсутствие 404 по статике:
 *особенно /media/hero.mp4, /media/bg-cyberpunk.png, /media/rock1.png, /media/rock2.png
 *если нет камней — создай 2 плейсхолдера 256×256px PNG и положи в public/media    или измени пути на существующие
*нет ли SSR/гидрационных предупреждений в консоли:
 *BackgroundStones — клиентский компонент (“use client”), рендерится после монтирования; не должно быть mismatch

Затем:

*запусти проект в подходящем режиме:
*dev (удобно для правок), либо build/start (для стабильности)
*если порт занят, используй альтернативные скрипты/порты (например 0.0.0.0:3020 или 127.0.0.1:3010)

сделай небольшой аудит кода:
*layout.tsx — важно: тут прямой импорт BackgroundStones; не использовать dynamic({ ssr:false }) в layout
*page.tsx — секция 1 оставить как есть; секция 3 сейчас удалена
*src/components/* — BackgroundStones, TopBar, слайдеры со scroll-snap
*globals.css — токены темы, утилиты (.btn-crypto, .border-crypto-gradient, тени/глоу)

*предложи оптимизации по производительности и анимациям:
 *избегай transform на sticky-предках; анимируй дочерние элементы
 *у фона камней одна анимация translate для “moving”, без scale/pulse
 *для тяжелых изображений — рассмотреть next/image (кроме декоративного фона)
*и приготовься реализовать следующий функционал (см. ниже “Открытые задачи”).

Команды (Windows PowerShell):
# Установка
npm ci

# Проверка сборки
npm run build

# Продакшн-старт
npm run start

# Dev-режим (если нужно)
npm run dev

Замечания :

*Если заметите 404 по изображению bg-cyberpunk.jpg — замените путь на /media/bg-cyberpunk.png и сделайте жёсткое обновление (Ctrl+F5) или очистите кэш.
*Для снижения нагрузки используйте цикл: правка → npm run build → npm run start; останавливайте сервер Ctrl+C, когда не нужен.
*В server layout нельзя использовать dynamic({ ssr:false }); клиентские штуки импортируем напрямую и помечаем “use client”.
*Проверяйте /api/health для готовности.

Важные правила/ограничения
*Не трогать первый сектор (герой с видео).
*Сектор 3 надо собрать с нуля: “Pinned elements / Scroll pinning”, 6 шагов, без длинного текста, без скролл‑локов (только sticky/scroll-snap).

*Фон камушков:
 *фиксированный абсолютный слой под контентом, pointer-events: none
 *всегда 4–5 камней, часть статична, часть медленно двигается (translate), без   pulse/scale
 *не создавать новые камни при прокрутке; генерация один раз на монтировании
*Избегать transform на sticky‑родителях, чтобы не ломать позиционирование.

Открытые задачи (приоритет)
1.Реализовать Sector 3 “Pinned elements / Scroll pinning”:
 *6 шагов-карточек, без описательного текста
 *sticky хедер/трек, чистый CSS/Framer без скролл‑блокировок
 *соответствие нашей чёрно‑зелёной теме (границы, свечения)
2.Фон “камни” — тонкая донастройка:
 *скорости и дистанции перемещения, размер/blur/слои; следить, чтобы всегда видны 4–5 элементов
 *проверить наличие /media/rock1.png и /media/rock2.png; при отсутствии — добавить
3.Устранить мелкие ESLint предупреждения (неиспользуемые импорты, no-img-element если решим перейти на next/image).

Готовность/критерии :
*npm ci проходит, сборка и старт без ошибок.
*Нет 404 по /media/*.
*Нет SSR/гидрационных предупреждений.
*Фон камней работает: часть статична, часть двигается; 4–5 штук.
*Сектор 3: готов первый прототип с 6 шагами и sticky-поведением, без скролл‑блокировок.

Если нужно — дам дополнительные требования по анимациям и контенту для сектора 3.